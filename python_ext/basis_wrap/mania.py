# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mania', [dirname(__file__)])
        except ImportError:
            import _mania
            return _mania
        if fp is not None:
            try:
                _mod = imp.load_module('_mania', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mania = swig_import_helper()
    del swig_import_helper
else:
    import _mania
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class critical_section(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, critical_section, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, critical_section, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mania.new_critical_section()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_critical_section
    __del__ = lambda self : None;
    def lock(self): return _mania.critical_section_lock(self)
    def unlock(self): return _mania.critical_section_unlock(self)
    def create(self, *args): return _mania.critical_section_create(self, *args)
    def initialized(self): return _mania.critical_section_initialized(self)
critical_section_swigregister = _mania.critical_section_swigregister
critical_section_swigregister(critical_section)

axis_x = _mania.axis_x
axis_y = _mania.axis_y
axis_z = _mania.axis_z
class point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mania.point_x_set
    __swig_getmethods__["x"] = _mania.point_x_get
    if _newclass:x = _swig_property(_mania.point_x_get, _mania.point_x_set)
    __swig_setmethods__["y"] = _mania.point_y_set
    __swig_getmethods__["y"] = _mania.point_y_get
    if _newclass:y = _swig_property(_mania.point_y_get, _mania.point_y_set)
    def __init__(self): 
        this = _mania.new_point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_point
    __del__ = lambda self : None;
point_swigregister = _mania.point_swigregister
point_swigregister(point)

class vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mania.new_vector2(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _mania.vector2___eq__(self, *args)
    def _assign(self, *args): return _mania.vector2__assign(self, *args)
    def _float(self): return _mania.vector2__float(self)
    __swig_setmethods__["x"] = _mania.vector2_x_set
    __swig_getmethods__["x"] = _mania.vector2_x_get
    if _newclass:x = _swig_property(_mania.vector2_x_get, _mania.vector2_x_set)
    __swig_setmethods__["y"] = _mania.vector2_y_set
    __swig_getmethods__["y"] = _mania.vector2_y_get
    if _newclass:y = _swig_property(_mania.vector2_y_get, _mania.vector2_y_set)
    __swig_destroy__ = _mania.delete_vector2
    __del__ = lambda self : None;
vector2_swigregister = _mania.vector2_swigregister
vector2_swigregister(vector2)

class vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mania.new_vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args): return _mania.vector3___add__(self, *args)
    def __sub__(self, *args): return _mania.vector3___sub__(self, *args)
    def __mul__(self, *args): return _mania.vector3___mul__(self, *args)
    def normalize(self): return _mania.vector3_normalize(self)
    def __eq__(self, *args): return _mania.vector3___eq__(self, *args)
    def _assign(self, *args): return _mania.vector3__assign(self, *args)
    def length(self): return _mania.vector3_length(self)
    def _float(self): return _mania.vector3__float(self)
    __swig_setmethods__["x"] = _mania.vector3_x_set
    __swig_getmethods__["x"] = _mania.vector3_x_get
    if _newclass:x = _swig_property(_mania.vector3_x_get, _mania.vector3_x_set)
    __swig_setmethods__["y"] = _mania.vector3_y_set
    __swig_getmethods__["y"] = _mania.vector3_y_get
    if _newclass:y = _swig_property(_mania.vector3_y_get, _mania.vector3_y_set)
    __swig_setmethods__["z"] = _mania.vector3_z_set
    __swig_getmethods__["z"] = _mania.vector3_z_get
    if _newclass:z = _swig_property(_mania.vector3_z_get, _mania.vector3_z_set)
    def __str__(self): return _mania.vector3___str__(self)
    __swig_destroy__ = _mania.delete_vector3
    __del__ = lambda self : None;
vector3_swigregister = _mania.vector3_swigregister
vector3_swigregister(vector3)

class vector4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mania.new_vector4(*args)
        try: self.this.append(this)
        except: self.this = this
    def _assign(self, *args): return _mania.vector4__assign(self, *args)
    def _vector3(self): return _mania.vector4__vector3(self)
    def _float(self): return _mania.vector4__float(self)
    def length(self): return _mania.vector4_length(self)
    def normalize(self): return _mania.vector4_normalize(self)
    __swig_setmethods__["x"] = _mania.vector4_x_set
    __swig_getmethods__["x"] = _mania.vector4_x_get
    if _newclass:x = _swig_property(_mania.vector4_x_get, _mania.vector4_x_set)
    __swig_setmethods__["y"] = _mania.vector4_y_set
    __swig_getmethods__["y"] = _mania.vector4_y_get
    if _newclass:y = _swig_property(_mania.vector4_y_get, _mania.vector4_y_set)
    __swig_setmethods__["z"] = _mania.vector4_z_set
    __swig_getmethods__["z"] = _mania.vector4_z_get
    if _newclass:z = _swig_property(_mania.vector4_z_get, _mania.vector4_z_set)
    __swig_setmethods__["w"] = _mania.vector4_w_set
    __swig_getmethods__["w"] = _mania.vector4_w_get
    if _newclass:w = _swig_property(_mania.vector4_w_get, _mania.vector4_w_set)
    __swig_destroy__ = _mania.delete_vector4
    __del__ = lambda self : None;
vector4_swigregister = _mania.vector4_swigregister
vector4_swigregister(vector4)

class Edge2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _mania.Edge2_p_set
    __swig_getmethods__["p"] = _mania.Edge2_p_get
    if _newclass:p = _swig_property(_mania.Edge2_p_get, _mania.Edge2_p_set)
    def __init__(self): 
        this = _mania.new_Edge2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_Edge2
    __del__ = lambda self : None;
Edge2_swigregister = _mania.Edge2_swigregister
Edge2_swigregister(Edge2)

class Edge3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _mania.Edge3_p_set
    __swig_getmethods__["p"] = _mania.Edge3_p_get
    if _newclass:p = _swig_property(_mania.Edge3_p_get, _mania.Edge3_p_set)
    def __init__(self): 
        this = _mania.new_Edge3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_Edge3
    __del__ = lambda self : None;
Edge3_swigregister = _mania.Edge3_swigregister
Edge3_swigregister(Edge3)


def multiply_matrix(*args):
  return _mania.multiply_matrix(*args)
multiply_matrix = _mania.multiply_matrix

def inverse_matrix(*args):
  return _mania.inverse_matrix(*args)
inverse_matrix = _mania.inverse_matrix
class matrix44(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix44, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix44, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mania.new_matrix44(*args)
        try: self.this.append(this)
        except: self.this = this
    def __mul__(self, *args): return _mania.matrix44___mul__(self, *args)
    def set_identity(self): return _mania.matrix44_set_identity(self)
    def get_axis(self, *args): return _mania.matrix44_get_axis(self, *args)
    def _float(self): return _mania.matrix44__float(self)
    def _kfloat(self): return _mania.matrix44__kfloat(self)
    def inverse(self): return _mania.matrix44_inverse(self)
    __swig_destroy__ = _mania.delete_matrix44
    __del__ = lambda self : None;
matrix44_swigregister = _mania.matrix44_swigregister
matrix44_swigregister(matrix44)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mania.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def _assign(self, *args): return _mania.Color__assign(self, *args)
    def _DWORD(self): return _mania.Color__DWORD(self)
    def ToRGB(self): return _mania.Color_ToRGB(self)
    __swig_destroy__ = _mania.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _mania.Color_swigregister
Color_swigregister(Color)


def vec_normalize(*args):
  return _mania.vec_normalize(*args)
vec_normalize = _mania.vec_normalize

def vec_cross(*args):
  return _mania.vec_cross(*args)
vec_cross = _mania.vec_cross

def vec_dot(*args):
  return _mania.vec_dot(*args)
vec_dot = _mania.vec_dot

def build_matrix_perspective_fov_lh(*args):
  return _mania.build_matrix_perspective_fov_lh(*args)
build_matrix_perspective_fov_lh = _mania.build_matrix_perspective_fov_lh

def build_matrix_lookat_lh(*args):
  return _mania.build_matrix_lookat_lh(*args)
build_matrix_lookat_lh = _mania.build_matrix_lookat_lh

def build_matrix_rotation_axis(*args):
  return _mania.build_matrix_rotation_axis(*args)
build_matrix_rotation_axis = _mania.build_matrix_rotation_axis

def build_matrix_trans_rot_scale(*args):
  return _mania.build_matrix_trans_rot_scale(*args)
build_matrix_trans_rot_scale = _mania.build_matrix_trans_rot_scale

def arctan2radian(*args):
  return _mania.arctan2radian(*args)
arctan2radian = _mania.arctan2radian
class classinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, classinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classinfo, name)
    __repr__ = _swig_repr
    def _is(self, *args): return _mania.classinfo__is(self, *args)
    __swig_setmethods__["name"] = _mania.classinfo_name_set
    __swig_getmethods__["name"] = _mania.classinfo_name_get
    if _newclass:name = _swig_property(_mania.classinfo_name_get, _mania.classinfo_name_set)
    __swig_setmethods__["parent_class"] = _mania.classinfo_parent_class_set
    __swig_getmethods__["parent_class"] = _mania.classinfo_parent_class_get
    if _newclass:parent_class = _swig_property(_mania.classinfo_parent_class_get, _mania.classinfo_parent_class_set)
    __swig_setmethods__["construct"] = _mania.classinfo_construct_set
    __swig_getmethods__["construct"] = _mania.classinfo_construct_get
    if _newclass:construct = _swig_property(_mania.classinfo_construct_get, _mania.classinfo_construct_set)
    def __init__(self): 
        this = _mania.new_classinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_classinfo
    __del__ = lambda self : None;
classinfo_swigregister = _mania.classinfo_swigregister
classinfo_swigregister(classinfo)

def vec_transform(*args):
  return _mania.vec_transform(*args)
vec_transform = _mania.vec_transform

class ref_counted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ref_counted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ref_counted, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mania.new_ref_counted()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_ref_counted
    __del__ = lambda self : None;
    def addref(self): return _mania.ref_counted_addref(self)
    def release(self): return _mania.ref_counted_release(self)
    def get_refcount(self): return _mania.ref_counted_get_refcount(self)
ref_counted_swigregister = _mania.ref_counted_swigregister
ref_counted_swigregister(ref_counted)

class identifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, identifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, identifier, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cs"] = _mania.identifier_cs_set
    __swig_getmethods__["cs"] = _mania.identifier_cs_get
    if _newclass:cs = _swig_property(_mania.identifier_cs_get, _mania.identifier_cs_set)
    __swig_setmethods__["counter"] = _mania.identifier_counter_set
    __swig_getmethods__["counter"] = _mania.identifier_counter_get
    if _newclass:counter = _swig_property(_mania.identifier_counter_get, _mania.identifier_counter_set)
    __swig_setmethods__["it"] = _mania.identifier_it_set
    __swig_getmethods__["it"] = _mania.identifier_it_get
    if _newclass:it = _swig_property(_mania.identifier_it_get, _mania.identifier_it_set)
    __swig_setmethods__["serial_number"] = _mania.identifier_serial_number_set
    __swig_getmethods__["serial_number"] = _mania.identifier_serial_number_get
    if _newclass:serial_number = _swig_property(_mania.identifier_serial_number_get, _mania.identifier_serial_number_set)
    def __init__(self): 
        this = _mania.new_identifier()
        try: self.this.append(this)
        except: self.this = this
    def _assign(self, *args): return _mania.identifier__assign(self, *args)
    def empty(self): return _mania.identifier_empty(self)
    def get_string_part(self): return _mania.identifier_get_string_part(self)
    def get_serial(self): return _mania.identifier_get_serial(self)
    __swig_destroy__ = _mania.delete_identifier
    __del__ = lambda self : None;
identifier_swigregister = _mania.identifier_swigregister
identifier_swigregister(identifier)
cvar = _mania.cvar

class object(ref_counted):
    __swig_setmethods__ = {}
    for _s in [ref_counted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, object, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_counted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, object, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get_classinfo"] = lambda x: _mania.object_get_classinfo
    if _newclass:get_classinfo = staticmethod(_mania.object_get_classinfo)
    __swig_getmethods__["constructor"] = lambda x: _mania.object_constructor
    if _newclass:constructor = staticmethod(_mania.object_constructor)
    def bind_classinfo(self): return _mania.object_bind_classinfo(self)
    def __init__(self): 
        this = _mania.new_object()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_object
    __del__ = lambda self : None;
    def get_name(self): return _mania.object_get_name(self)
    def set_name(self, *args): return _mania.object_set_name(self, *args)
    def _is(self, *args): return _mania.object__is(self, *args)
    def set_outer(self, *args): return _mania.object_set_outer(self, *args)
    def get_outer(self): return _mania.object_get_outer(self)
object_swigregister = _mania.object_swigregister
object_swigregister(object)

def object_get_classinfo():
  return _mania.object_get_classinfo()
object_get_classinfo = _mania.object_get_classinfo

def object_constructor():
  return _mania.object_constructor()
object_constructor = _mania.object_constructor

WINVER = _mania.WINVER
ccrc_continue = _mania.ccrc_continue
ccrc_break = _mania.ccrc_break
class core_component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core_component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core_component, name)
    __repr__ = _swig_repr
    def OnBeginFrame(self): return _mania.core_component_OnBeginFrame(self)
    def OnUpdate(self): return _mania.core_component_OnUpdate(self)
    def OnEndFrame(self): return _mania.core_component_OnEndFrame(self)
    def OnBeginVisualFrame(self): return _mania.core_component_OnBeginVisualFrame(self)
    def OnUpdateVisual(self): return _mania.core_component_OnUpdateVisual(self)
    def OnEndVisualFrame(self): return _mania.core_component_OnEndVisualFrame(self)
    def OnBeginLogicalFrame(self): return _mania.core_component_OnBeginLogicalFrame(self)
    def OnUpdateLogical(self): return _mania.core_component_OnUpdateLogical(self)
    def OnEndLogicalFrame(self): return _mania.core_component_OnEndLogicalFrame(self)
    def __init__(self): 
        this = _mania.new_core_component()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_core_component
    __del__ = lambda self : None;
core_component_swigregister = _mania.core_component_swigregister
core_component_swigregister(core_component)

class core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mania.new_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_core
    __del__ = lambda self : None;
    def get_log(self): return _mania.core_get_log(self)
    def get_timer(self): return _mania.core_get_timer(self)
    __swig_getmethods__["get_instance"] = lambda x: _mania.core_get_instance
    if _newclass:get_instance = staticmethod(_mania.core_get_instance)
    __swig_getmethods__["DestroyInstance"] = lambda x: _mania.core_DestroyInstance
    if _newclass:DestroyInstance = staticmethod(_mania.core_DestroyInstance)
    def init(self, *args): return _mania.core_init(self, *args)
    def uninit(self): return _mania.core_uninit(self)
    def BeginFrame(self): return _mania.core_BeginFrame(self)
    def update(self): return _mania.core_update(self)
    def EndFrame(self): return _mania.core_EndFrame(self)
    def BeginVisualFrame(self): return _mania.core_BeginVisualFrame(self)
    def UpdateVisual(self): return _mania.core_UpdateVisual(self)
    def EndVisualFrame(self): return _mania.core_EndVisualFrame(self)
    def BeginLogicalFrame(self): return _mania.core_BeginLogicalFrame(self)
    def UpdateLogical(self): return _mania.core_UpdateLogical(self)
    def EndLogicalFrame(self): return _mania.core_EndLogicalFrame(self)
    def get_rendering_thread(self): return _mania.core_get_rendering_thread(self)
    def get_inputdevice(self): return _mania.core_get_inputdevice(self)
    def renderingthread_disabled(self): return _mania.core_renderingthread_disabled(self)
    def disable_renderingthread(self, *args): return _mania.core_disable_renderingthread(self, *args)
    def parse_cmdline(self, *args): return _mania.core_parse_cmdline(self, *args)
    def get_cmdline_param(self, *args): return _mania.core_get_cmdline_param(self, *args)
    def get_plugin(self, *args): return _mania.core_get_plugin(self, *args)
    __swig_setmethods__["m_scriptvm"] = _mania.core_m_scriptvm_set
    __swig_getmethods__["m_scriptvm"] = _mania.core_m_scriptvm_get
    if _newclass:m_scriptvm = _swig_property(_mania.core_m_scriptvm_get, _mania.core_m_scriptvm_set)
    def execute_script(self, *args): return _mania.core_execute_script(self, *args)
    def get_scene_renderer(self): return _mania.core_get_scene_renderer(self)
    def set_scene_renderer(self, *args): return _mania.core_set_scene_renderer(self, *args)
    __swig_setmethods__["main_thread_lock"] = _mania.core_main_thread_lock_set
    __swig_getmethods__["main_thread_lock"] = _mania.core_main_thread_lock_get
    if _newclass:main_thread_lock = _swig_property(_mania.core_main_thread_lock_get, _mania.core_main_thread_lock_set)
    __swig_setmethods__["render_thread_lock"] = _mania.core_render_thread_lock_set
    __swig_getmethods__["render_thread_lock"] = _mania.core_render_thread_lock_get
    if _newclass:render_thread_lock = _swig_property(_mania.core_render_thread_lock_get, _mania.core_render_thread_lock_set)
core_swigregister = _mania.core_swigregister
core_swigregister(core)

def core_get_instance():
  return _mania.core_get_instance()
core_get_instance = _mania.core_get_instance

def core_DestroyInstance():
  return _mania.core_DestroyInstance()
core_DestroyInstance = _mania.core_DestroyInstance


def get_core():
  return _mania.get_core()
get_core = _mania.get_core
class node(object):
    __swig_setmethods__ = {}
    for _s in [object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, node, name, value)
    __swig_getmethods__ = {}
    for _s in [object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, node, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get_classinfo"] = lambda x: _mania.node_get_classinfo
    if _newclass:get_classinfo = staticmethod(_mania.node_get_classinfo)
    __swig_getmethods__["constructor"] = lambda x: _mania.node_constructor
    if _newclass:constructor = staticmethod(_mania.node_constructor)
    def bind_classinfo(self): return _mania.node_bind_classinfo(self)
    def __init__(self): 
        this = _mania.new_node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_node
    __del__ = lambda self : None;
    def _assign(self, *args): return _mania.node__assign(self, *args)
    def get_subnodes(self): return _mania.node_get_subnodes(self)
    def get_parent(self): return _mania.node_get_parent(self)
    def attach(self, *args): return _mania.node_attach(self, *args)
    def detach(self, *args): return _mania.node_detach(self, *args)
    def detach_children(self): return _mania.node_detach_children(self)
    def get_child_count(self): return _mania.node_get_child_count(self)
    def get_child(self, *args): return _mania.node_get_child(self, *args)
    def update(self, *args): return _mania.node_update(self, *args)
node_swigregister = _mania.node_swigregister
node_swigregister(node)

def node_get_classinfo():
  return _mania.node_get_classinfo()
node_get_classinfo = _mania.node_get_classinfo

def node_constructor():
  return _mania.node_constructor()
node_constructor = _mania.node_constructor

class tnode(node):
    __swig_setmethods__ = {}
    for _s in [node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tnode, name, value)
    __swig_getmethods__ = {}
    for _s in [node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tnode, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get_classinfo"] = lambda x: _mania.tnode_get_classinfo
    if _newclass:get_classinfo = staticmethod(_mania.tnode_get_classinfo)
    __swig_getmethods__["constructor"] = lambda x: _mania.tnode_constructor
    if _newclass:constructor = staticmethod(_mania.tnode_constructor)
    def bind_classinfo(self): return _mania.tnode_bind_classinfo(self)
    def __init__(self): 
        this = _mania.new_tnode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_tnode
    __del__ = lambda self : None;
    def get_local_transform(self): return _mania.tnode_get_local_transform(self)
    def set_local_transform(self, *args): return _mania.tnode_set_local_transform(self, *args)
    def get_world_transform(self): return _mania.tnode_get_world_transform(self)
    def update_world_transform(self): return _mania.tnode_update_world_transform(self)
tnode_swigregister = _mania.tnode_swigregister
tnode_swigregister(tnode)

def tnode_get_classinfo():
  return _mania.tnode_get_classinfo()
tnode_get_classinfo = _mania.tnode_get_classinfo

def tnode_constructor():
  return _mania.tnode_constructor()
tnode_constructor = _mania.tnode_constructor

class renderable(tnode):
    __swig_setmethods__ = {}
    for _s in [tnode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, renderable, name, value)
    __swig_getmethods__ = {}
    for _s in [tnode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, renderable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["get_classinfo"] = lambda x: _mania.renderable_get_classinfo
    if _newclass:get_classinfo = staticmethod(_mania.renderable_get_classinfo)
    def bind_classinfo(self): return _mania.renderable_bind_classinfo(self)
    __swig_destroy__ = _mania.delete_renderable
    __del__ = lambda self : None;
    def render(self, *args): return _mania.renderable_render(self, *args)
renderable_swigregister = _mania.renderable_swigregister
renderable_swigregister(renderable)

def renderable_get_classinfo():
  return _mania.renderable_get_classinfo()
renderable_get_classinfo = _mania.renderable_get_classinfo

class renderlist(object):
    __swig_setmethods__ = {}
    for _s in [object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, renderlist, name, value)
    __swig_getmethods__ = {}
    for _s in [object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, renderlist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_priority"] = _mania.renderlist_m_priority_set
    __swig_getmethods__["m_priority"] = _mania.renderlist_m_priority_get
    if _newclass:m_priority = _swig_property(_mania.renderlist_m_priority_get, _mania.renderlist_m_priority_set)
    __swig_setmethods__["m_renderables"] = _mania.renderlist_m_renderables_set
    __swig_getmethods__["m_renderables"] = _mania.renderlist_m_renderables_get
    if _newclass:m_renderables = _swig_property(_mania.renderlist_m_renderables_get, _mania.renderlist_m_renderables_set)
    def __init__(self): 
        this = _mania.new_renderlist()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_renderlist
    __del__ = lambda self : None;
renderlist_swigregister = _mania.renderlist_swigregister
renderlist_swigregister(renderlist)

class scene_renderer(object):
    __swig_setmethods__ = {}
    for _s in [object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, scene_renderer, name, value)
    __swig_getmethods__ = {}
    for _s in [object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, scene_renderer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mania.new_scene_renderer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_scene_renderer
    __del__ = lambda self : None;
    def render_all(self, *args): return _mania.scene_renderer_render_all(self, *args)
    def generate_renderlists(self, *args): return _mania.scene_renderer_generate_renderlists(self, *args)
    def render_renderlists(self, *args): return _mania.scene_renderer_render_renderlists(self, *args)
    def set_viewtransform(self, *args): return _mania.scene_renderer_set_viewtransform(self, *args)
    def set_projtransform(self, *args): return _mania.scene_renderer_set_projtransform(self, *args)
    def get_viewtransform(self, *args): return _mania.scene_renderer_get_viewtransform(self, *args)
    def get_projtransform(self, *args): return _mania.scene_renderer_get_projtransform(self, *args)
scene_renderer_swigregister = _mania.scene_renderer_swigregister
scene_renderer_swigregister(scene_renderer)

class transform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mania.new_transform()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_transform
    __del__ = lambda self : None;
    def get_matrix(self): return _mania.transform_get_matrix(self)
    def get_scale(self): return _mania.transform_get_scale(self)
    def get_rotation(self): return _mania.transform_get_rotation(self)
    def get_translation(self): return _mania.transform_get_translation(self)
    def set_matrix(self, *args): return _mania.transform_set_matrix(self, *args)
    def set_scale(self, *args): return _mania.transform_set_scale(self, *args)
    def set_rotation(self, *args): return _mania.transform_set_rotation(self, *args)
    def set_translation(self, *args): return _mania.transform_set_translation(self, *args)
    def set_identity(self): return _mania.transform_set_identity(self)
    def transformed_by(self, *args): return _mania.transform_transformed_by(self, *args)
    def update_matrix(self): return _mania.transform_update_matrix(self)
    def update_scale(self): return _mania.transform_update_scale(self)
    def update_rotation(self): return _mania.transform_update_rotation(self)
    def update_translation(self): return _mania.transform_update_translation(self)
    def __str__(self): return _mania.transform___str__(self)
transform_swigregister = _mania.transform_swigregister
transform_swigregister(transform)

class camera(tnode):
    __swig_setmethods__ = {}
    for _s in [tnode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, camera, name, value)
    __swig_getmethods__ = {}
    for _s in [tnode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, camera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mania.new_camera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mania.delete_camera
    __del__ = lambda self : None;
    def get_fov(self): return _mania.camera_get_fov(self)
    def set_fov(self, *args): return _mania.camera_set_fov(self, *args)
    def get_aspect(self): return _mania.camera_get_aspect(self)
    def set_aspect(self, *args): return _mania.camera_set_aspect(self, *args)
    def update(self, *args): return _mania.camera_update(self, *args)
    __swig_getmethods__["get_classinfo"] = lambda x: _mania.camera_get_classinfo
    if _newclass:get_classinfo = staticmethod(_mania.camera_get_classinfo)
    __swig_getmethods__["constructor"] = lambda x: _mania.camera_constructor
    if _newclass:constructor = staticmethod(_mania.camera_constructor)
    def bind_classinfo(self): return _mania.camera_bind_classinfo(self)
camera_swigregister = _mania.camera_swigregister
camera_swigregister(camera)

def camera_get_classinfo():
  return _mania.camera_get_classinfo()
camera_get_classinfo = _mania.camera_get_classinfo

def camera_constructor():
  return _mania.camera_constructor()
camera_constructor = _mania.camera_constructor



